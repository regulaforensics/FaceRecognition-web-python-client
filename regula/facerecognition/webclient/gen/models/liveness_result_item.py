# coding: utf-8

"""
    Regula Face Recognition Web API

    Regula Face Recognition Web API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facerecognition.webclient.gen.configuration import Configuration


class LivenessResultItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'face': 'str',
        'liveness_status': 'LivenessStatus',
        'code': 'float',
        'index': 'float'
    }

    attribute_map = {
        'face': 'face',
        'liveness_status': 'livenessStatus',
        'code': 'code',
        'index': 'index'
    }

    def __init__(self, face=None, liveness_status=None, code=None, index=None, local_vars_configuration=None):  # noqa: E501
        """LivenessResultItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._face = None
        self._liveness_status = None
        self._code = None
        self._index = None
        self.discriminator = None

        self.face = face
        self.liveness_status = liveness_status
        if code is not None:
            self.code = code
        if index is not None:
            self.index = index

    @property
    def face(self):
        """Gets the face of this LivenessResultItem.  # noqa: E501

        Base64 encoded image  # noqa: E501

        :return: The face of this LivenessResultItem.  # noqa: E501
        :rtype: str
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this LivenessResultItem.

        Base64 encoded image  # noqa: E501

        :param face: The face of this LivenessResultItem.  # noqa: E501
        :type face: str
        """
        if self.local_vars_configuration.client_side_validation and face is None:  # noqa: E501
            raise ValueError("Invalid value for `face`, must not be `None`")  # noqa: E501

        self._face = face

    @property
    def liveness_status(self):
        """Gets the liveness_status of this LivenessResultItem.  # noqa: E501


        :return: The liveness_status of this LivenessResultItem.  # noqa: E501
        :rtype: LivenessStatus
        """
        return self._liveness_status

    @liveness_status.setter
    def liveness_status(self, liveness_status):
        """Sets the liveness_status of this LivenessResultItem.


        :param liveness_status: The liveness_status of this LivenessResultItem.  # noqa: E501
        :type liveness_status: LivenessStatus
        """
        if self.local_vars_configuration.client_side_validation and liveness_status is None:  # noqa: E501
            raise ValueError("Invalid value for `liveness_status`, must not be `None`")  # noqa: E501

        self._liveness_status = liveness_status

    @property
    def code(self):
        """Gets the code of this LivenessResultItem.  # noqa: E501


        :return: The code of this LivenessResultItem.  # noqa: E501
        :rtype: float
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LivenessResultItem.


        :param code: The code of this LivenessResultItem.  # noqa: E501
        :type code: float
        """

        self._code = code

    @property
    def index(self):
        """Gets the index of this LivenessResultItem.  # noqa: E501


        :return: The index of this LivenessResultItem.  # noqa: E501
        :rtype: float
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this LivenessResultItem.


        :param index: The index of this LivenessResultItem.  # noqa: E501
        :type index: float
        """

        self._index = index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LivenessResultItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LivenessResultItem):
            return True

        return self.to_dict() != other.to_dict()
