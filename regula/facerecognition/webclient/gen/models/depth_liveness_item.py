# coding: utf-8

"""
    Regula Face Recognition Web API

    Regula Face Recognition Web API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facerecognition.webclient.gen.configuration import Configuration


class DepthLivenessItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_scene': 'str',
        'data_depth': 'str',
        'depth_scale': 'float'
    }

    attribute_map = {
        'data_scene': 'dataScene',
        'data_depth': 'dataDepth',
        'depth_scale': 'depthScale'
    }

    def __init__(self, data_scene=None, data_depth=None, depth_scale=None, local_vars_configuration=None):  # noqa: E501
        """DepthLivenessItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_scene = None
        self._data_depth = None
        self._depth_scale = None
        self.discriminator = None

        if data_scene is not None:
            self.data_scene = data_scene
        if data_depth is not None:
            self.data_depth = data_depth
        if depth_scale is not None:
            self.depth_scale = depth_scale

    @property
    def data_scene(self):
        """Gets the data_scene of this DepthLivenessItem.  # noqa: E501

        Base64 encoded image  # noqa: E501

        :return: The data_scene of this DepthLivenessItem.  # noqa: E501
        :rtype: str
        """
        return self._data_scene

    @data_scene.setter
    def data_scene(self, data_scene):
        """Sets the data_scene of this DepthLivenessItem.

        Base64 encoded image  # noqa: E501

        :param data_scene: The data_scene of this DepthLivenessItem.  # noqa: E501
        :type data_scene: str
        """

        self._data_scene = data_scene

    @property
    def data_depth(self):
        """Gets the data_depth of this DepthLivenessItem.  # noqa: E501

        Base64 encoded image  # noqa: E501

        :return: The data_depth of this DepthLivenessItem.  # noqa: E501
        :rtype: str
        """
        return self._data_depth

    @data_depth.setter
    def data_depth(self, data_depth):
        """Sets the data_depth of this DepthLivenessItem.

        Base64 encoded image  # noqa: E501

        :param data_depth: The data_depth of this DepthLivenessItem.  # noqa: E501
        :type data_depth: str
        """

        self._data_depth = data_depth

    @property
    def depth_scale(self):
        """Gets the depth_scale of this DepthLivenessItem.  # noqa: E501

        Normalized factor for color depth.  # noqa: E501

        :return: The depth_scale of this DepthLivenessItem.  # noqa: E501
        :rtype: float
        """
        return self._depth_scale

    @depth_scale.setter
    def depth_scale(self, depth_scale):
        """Sets the depth_scale of this DepthLivenessItem.

        Normalized factor for color depth.  # noqa: E501

        :param depth_scale: The depth_scale of this DepthLivenessItem.  # noqa: E501
        :type depth_scale: float
        """

        self._depth_scale = depth_scale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepthLivenessItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DepthLivenessItem):
            return True

        return self.to_dict() != other.to_dict()
